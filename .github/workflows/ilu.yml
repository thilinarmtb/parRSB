name: ILU tests
on:
  push:
    branches: [main, next]
  pull_request:
    branches: [main, next]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the tests with tmate debugging enabled'
        required: false
        default: false
env:
  GITHUB.TOKEN: ${{ secrets.token }}
  CIDIR: parRSB-github-ci
  EXAMPLESDIR: build/examples
  SCRIPTDIR: .github/workflows
  MPIEXE: "mpirun --oversubscribe"
jobs:
  ilu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [box_8x1x1, box_4x2x1, box_2x2x2, box_10x1x1, box_3x5x7, pyramid, solid, ethier, vortex, expansion]
        np: [1, 2, 3, 4, 5, 6]
      fail-fast: false
    name: "${{ matrix.test }}, NP = ${{ matrix.np }}"
    env:
      GSVER: 1.0.7
      CC: mpicc
    steps:
      - name: Setup GitHub actions
        uses: actions/checkout@v3
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3.13
        if: ${{ inputs.debug_enabled }}
      - name: Setup Python actions
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt -y update
          sudo apt install -y openmpi-bin libopenmpi-dev
          sudo apt install -y libblas-dev liblapack-dev octave
          sudo apt install -y build-essential

          python3 -m pip install --upgrade pip
          pip install numpy scipy
      - name: Build parRSB and clone tests
        shell: bash
        run: |
          # Build gslib
          git clone https://github.com/Nek5000/gslib.git
          make -C gslib -j4

          # Build parRSB
          export GSLIBPATH=`pwd`/gslib/build/
          make -j4 examples

          # Clone tests
          git clone https://github.com/thilinarmtb/${CIDIR}.git
      - name: ILU(0) factorization
        if: always()
        shell: bash
        run: |
          export PARRSB_DUMP_ILU=1

          cp ${EXAMPLESDIR}/ilu ${SCRIPTDIR}/ilu0.m \
            ${CIDIR}/${{ matrix.test }}
          cd ${CIDIR}/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}
          ${MPIEXE} -np ${{ matrix.np }} ./ilu --mesh ${{ matrix.test }} \
            --tol=${tol} --ilu_type=0

          octave-cli ilu0.m
      - name: ILU(0) solve
        if: always()
        shell: bash
        run: |
          export PARRSB_DUMP_ILU=1

          cp ${EXAMPLESDIR}/ilu ${SCRIPTDIR}/ilu-solve.py \
            ${CIDIR}/${{ matrix.test }}
          cd ${CIDIR}/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}
          ${MPIEXE} -np ${{ matrix.np }} ./ilu --mesh ${{ matrix.test }} \
            --tol=${tol} --ilu_type=0 --ilu_solve=1

          python ilu-solve.py --test_fw 1 --test_bw 1
      - name: ILUC factorization
        if: always()
        shell: bash
        run: |
          export PARRSB_DUMP_ILU=1

          cp ${EXAMPLESDIR}/ilu ${SCRIPTDIR}/iluc.m \
            ${CIDIR}/${{ matrix.test }}
          cd ${CIDIR}/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}
          ${MPIEXE} -np ${{ matrix.np }} ./ilu --mesh ${{ matrix.test }} \
            --tol=${tol} --ilu_type=1

          octave-cli iluc.m
      - name: ILUC solve
        if: always()
        shell: bash
        run: |
          export PARRSB_DUMP_ILU=1

          cp ${EXAMPLESDIR}/ilu ${SCRIPTDIR}/ilu-solve.py \
            ${CIDIR}/${{ matrix.test }}
          cd ${CIDIR}/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}
          ${MPIEXE} -np ${{ matrix.np }} ./ilu --mesh ${{ matrix.test }} \
            --tol=${tol} --ilu_type=1 --ilu_solve=1

          python ilu-solve.py --test_fw 1 --test_bw 1
      - name: Block to allow inspecting failures
        run: sleep 30m
        if: ${{ failure() && inputs.debug_enabled }}
